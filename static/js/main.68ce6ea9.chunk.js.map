{"version":3,"sources":["Chess/moves.js","Chess/Chess.jsx","App.jsx","index.js"],"names":["check","r","c","rook","block","Board","possibleMoves","attack","forEach","move","r1","c1","piece","white","push","bishop","pawn","firstMove","getValidMoves","console","log","pieceName","knight","move1","move2","atk","queen","king","Chess","props","state","black","activePlayer","whitepawn","blackpawn","i","color","row","j","this","setState","initialiseGame","winner","alert","newBoard","moves","selected","index","pos","currIndex","gameover","newRow","player","highlight","display","map","index1","displayRow","index2","onClick","src","className","changePosition","key","style","backgroundColor","eliminate","margin","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68ce6ea9.chunk.js","sourcesContent":["// white above\r\n// black down\r\n\r\nconst check = (r,c) => {\r\n    if(r<8 && r>=0 && c<8 && c>=0) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nconst knight = (block,Board) => {\r\n    let movement = [{r: 2, c: 1},{r: 2, c: -1},{r: 1, c: 2}, {r: 1 ,c: -2},{r: -2, c: 1},{r: -2, c: -1},{r: -1, c: 2}, {r: -1 ,c: -2}]\r\n    let {r,c} = block\r\n    let possibleMoves = []\r\n    let attack = []\r\n    \r\n    movement.forEach((move) => {\r\n        let r1,c1\r\n        r1 = r + move.r\r\n        c1 = c + move.c\r\n        if(!check(r1,c1))\r\n            return\r\n        \r\n        if(!Board[r1][c1].piece){\r\n            possibleMoves.push({r: r1 ,c: c1})\r\n        }\r\n        else if(Board[r1][c1].piece.white !== block.white) {\r\n            attack.push({r: r1, c: c1})\r\n        }\r\n    })\r\n    return {possibleMoves,attack}\r\n}\r\n\r\nconst rook = (block,Board) => {\r\n    let possibleMoves = []\r\n    let attack = []\r\n    let {r,c} = block\r\n\r\n    let moves = [{r: 1, c: 0} , {r: -1, c: 0} , {r: 0, c: 1} , {r: 0, c: -1}]\r\n    moves.forEach((move) => {\r\n        let r1 = r + move.r\r\n        let c1 = c + move.c\r\n\r\n        while(check(r1,c1)) {\r\n            if(!Board[r1][c1].piece) {\r\n                possibleMoves.push({r: r1, c: c1})\r\n            }\r\n            else {\r\n                // opposite color\r\n                if(Board[r1][c1].piece.white !== block.white) {\r\n                    attack.push({r: r1, c: c1})\r\n                }\r\n                break;\r\n            }\r\n            r1 = r1 + move.r\r\n            c1 = c1 + move.c\r\n        }\r\n    })\r\n    return {possibleMoves , attack}\r\n}\r\n\r\nconst bishop = (block,Board) => {\r\n    let {r,c} = block\r\n    let possibleMoves = []\r\n    let attack = []\r\n    \r\n    let moves = [{r: 1, c: 1} , {r: 1, c: -1} , {r: -1, c: 1} , {r: -1, c: -1}]\r\n    moves.forEach((move) => {\r\n        let r1 = r + move.r\r\n        let c1 = c + move.c\r\n\r\n        while(check(r1,c1)) {\r\n            if(!Board[r1][c1].piece) {\r\n                possibleMoves.push({r: r1, c: c1})\r\n            }\r\n            else {\r\n                // opposite color\r\n                if(Board[r1][c1].piece.white !== block.white) {\r\n                    attack.push({r: r1, c: c1})\r\n                }\r\n                break;\r\n            }\r\n            r1 = r1 + move.r\r\n            c1 = c1 + move.c\r\n        }\r\n    })\r\n    return {possibleMoves , attack}\r\n}\r\n\r\nconst queen = (block,Board) => {\r\n    let move1 = rook(block,Board)\r\n    let move2 = bishop(block,Board)\r\n    let possibleMoves = move1.possibleMoves\r\n    let attack = move1.attack\r\n\r\n    move2.possibleMoves.forEach((move)=>{\r\n        possibleMoves.push(move)\r\n    })\r\n\r\n    move2.attack.forEach((atk) => {\r\n        attack.push(atk)\r\n    })\r\n    return {possibleMoves , attack}\r\n}\r\n\r\nconst king = (block,Board) => {\r\n    let possibleMoves = []\r\n    let attack = []\r\n    let {r,c} = block\r\n\r\n    let moves = [{r: 1, c: 0} , {r: 1, c: 1} , {r: 1, c: -1} ,{r: -1, c: 0} , {r: -1, c: 1} , {r: -1, c: -1} ,{r: 0, c: 0} , {r: 0, c: 1} , {r: 0, c: -1}]\r\n    moves.forEach((move) => {\r\n        let r1 = r + move.r\r\n        let c1 = c + move.c\r\n\r\n        if(!check(r1,c1))\r\n            return\r\n        \r\n        if(!Board[r1][c1].piece)\r\n            possibleMoves.push({r: r1, c: c1})\r\n        else if(block.white !== Board[r1][c1].piece.white) {\r\n            attack.push({r: r1, c: c1})\r\n        }\r\n    })\r\n\r\n    return {possibleMoves , attack}\r\n}\r\n\r\nconst getValidMoves = (block,Board) => {\r\n\r\n    console.log(block.pieceName)\r\n    switch(block.pieceName) {\r\n        case 'pawn':\r\n            //no need of break we are returning the value here\r\n            return pawn(block,Board);\r\n        case 'knight':\r\n            return knight(block,Board);\r\n        case 'rook':\r\n            return rook(block,Board);\r\n        case 'bishop':\r\n            return bishop(block,Board);\r\n        case 'queen':\r\n            return queen(block,Board);\r\n        case 'king':\r\n            return king(block,Board);\r\n        default:\r\n            return []\r\n    }\r\n}\r\n\r\n\r\nconst pawn = (block,Board) => {\r\n    let possibleMoves = []\r\n    let attack = []\r\n    let {r,c} = block\r\n    if(block.white) {\r\n        if(r+1<8 && !Board[r+1][c].piece) {\r\n            possibleMoves.push({r: r+1, c})\r\n            // inside if because if first move not possible then 2nd also (cannot jump)\r\n            if(r+2<8 && block.firstMove && !Board[r+2][c].piece) {\r\n                possibleMoves.push({r: r+2, c})\r\n            }\r\n        }\r\n        // if opponent piece is present diagonaly\r\n        if(r+1 < 8 && c+1 < 8 && Board[r+1][c+1].piece && !Board[r+1][c+1].piece.white) {\r\n            attack.push({r: r+1,c: c+1})\r\n        }\r\n        if(r+1 < 8 && c-1 >= 0 && Board[r+1][c-1].piece && !Board[r+1][c-1].piece.white) {\r\n            attack.push({r: r+1, c: c-1})\r\n        }\r\n    }\r\n    else {\r\n        if(r-1 >= 0 && !Board[r-1][c].piece){\r\n            possibleMoves.push({r: r-1, c})\r\n            if(r-2 >= 0 && block.firstMove && !Board[r-2][c].piece) {\r\n                possibleMoves.push({r: r-2, c})\r\n            }\r\n        }\r\n        if(r-1 >= 0 && c+1 < 8 && Board[r-1][c+1].piece && Board[r-1][c+1].piece.white) {\r\n            attack.push({r: r-1,c: c+1})\r\n        }\r\n        if(r-1 >= 0 && c-1 >= 0 && Board[r-1][c-1].piece && Board[r-1][c-1].piece.white) {\r\n            attack.push({r: r-1,c: c-1})\r\n        }\r\n    }\r\n    return {possibleMoves , attack}\r\n}\r\n\r\nexport default getValidMoves\r\n","import React,{Component} from 'react'\r\nimport './chess.css'\r\nimport getValidMoves from './moves'\r\n\r\nclass Chess extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            white : {\r\n\r\n            },\r\n            black : {\r\n\r\n            },\r\n            Board : [],\r\n            possibleMoves: [],\r\n            attack: [],\r\n            activePlayer: false// flase for black and true for white\r\n        }\r\n    }\r\n    initialiseGame() {\r\n        let white = {}\r\n        let black = {}\r\n        let whitepawn = []\r\n        let blackpawn = []\r\n\r\n        for(let i=0 ; i<8 ; i++) {\r\n            whitepawn.push({r: 1 , c: i, firstMove: true, move: 'down'})\r\n            blackpawn.push({r: 6, c: 7-i ,firstMove: true, move: 'up'})\r\n        }\r\n        black.pawn = blackpawn\r\n        white.pawn = whitepawn\r\n        \r\n        black.rook = [{r: 7, c: 0, firstMove: true},{r: 7, c: 7, firstMove: true}]\r\n        white.rook = [{r: 0, c: 0, firstMove: true},{r: 0, c: 7, firstMove: true}]\r\n\r\n        black.knight = [{r: 7, c: 1, firstMove: true},{r: 7, c: 6, firstMove: true}]\r\n        white.knight = [{r: 0, c: 1, firstMove: true},{r: 0, c: 6, firstMove: true}]\r\n\r\n        black.bishop = [{r: 7, c: 2, firstMove: true},{r: 7, c: 5, firstMove: true}]\r\n        white.bishop = [{r: 0, c: 2, firstMove: true},{r: 0, c: 5, firstMove: true}]\r\n\r\n        black.queen = [{r: 7, c: 3, firstMove: true}]\r\n        white.queen = [{r: 0, c: 3, firstMove: true}]\r\n\r\n        black.king = [{r: 7, c: 4, firstMove: true}]\r\n        white.king = [{r: 0, c: 4, firstMove: true}]\r\n\r\n        \r\n\r\n        let color = true // white , black = false\r\n        let Board = []\r\n        for(let i=0 ; i<8 ; i++) {\r\n            let c = color\r\n            let row = []\r\n\r\n            for(let j=0 ; j<8 ; j++) {    \r\n                row.push({r: i, c: j, color: c})\r\n                c = !c\r\n            }\r\n            \r\n            color = !color\r\n            Board.push(row)\r\n        }\r\n\r\n        this.setState({Board,white,black,possibleMoves: [],attack: []})\r\n    }\r\n    componentDidMount() {\r\n        this.initialiseGame()\r\n    }\r\n    \r\n    gameover(winner) {\r\n        if(winner) {\r\n            alert('white won')\r\n        }\r\n        else {\r\n            alert('black won')\r\n        }\r\n        this.initialiseGame()\r\n    }\r\n\r\n    move(piece,newBoard) {\r\n        ////console.log(piece)\r\n        // we will not show the moves of non active player \r\n        if(piece.white !== this.state.activePlayer)\r\n            return\r\n        let moves = getValidMoves(piece,newBoard)\r\n        this.setState({selected: piece, possibleMoves: moves.possibleMoves, attack: moves.attack})\r\n    }\r\n\r\n    changePosition(r,c) {\r\n        let {selected,activePlayer} = this.state\r\n        // here selected = piece (object reference) so we change selected {r,c} it will change the value of piece inside white , black (but will not rerender so we need to do this.setState but do not change the reference of selected)\r\n        selected.r = r\r\n        selected.c = c\r\n        selected.firstMove = false\r\n        ////console.log('rerender called')\r\n        this.setState({selected, possibleMoves: [], attack: [],activePlayer: !activePlayer})\r\n    }\r\n    eliminate(block) {\r\n        let {white,black,selected,activePlayer} =  this.state\r\n\r\n        //eliminate block and change position of select to this block        \r\n        if(block.piece.white) {\r\n            let piece = block.piece\r\n            let index = -1\r\n            white[piece.pieceName].forEach((pos,currIndex) => {\r\n                if(!pos)\r\n                    return\r\n                let {r,c} = pos\r\n                if(r === piece.r && c === piece.c) {\r\n                    index = currIndex\r\n                    return\r\n                }\r\n            })\r\n            // selected = reference of piece so it is changing the original object\r\n            selected.r = piece.r\r\n            selected.c = piece.c\r\n            // after delete arr will still have that index but it will be undefined \r\n            delete white[piece.pieceName][index]\r\n            white[piece.pieceName][index] = null\r\n        }\r\n        else {\r\n            let piece = block.piece\r\n            let index = -1\r\n            //console.log(piece.pieceName,black[piece.pieceName])\r\n            black[piece.pieceName].forEach((pos,currIndex) => {\r\n                if(!pos)\r\n                    return\r\n                let {r,c} = pos\r\n                if(r === piece.r && c === piece.c) {\r\n                    index = currIndex\r\n                    return\r\n                }\r\n            })\r\n            // selected = reference of piece so it is changing the original object\r\n            selected.r = piece.r\r\n            selected.c = piece.c\r\n            // after delete arr will still have that index but it will be undefined \r\n            delete black[piece.pieceName][index]\r\n            black[piece.pieceName][index] = null\r\n        }\r\n        if(block.piece.pieceName === 'king') {\r\n            this.gameover(!block.piece.white)\r\n        } \r\n        else\r\n            this.setState({white, black, selected: null, activePlayer: !activePlayer, possibleMoves: [], attack: []})\r\n    }\r\n    render() {\r\n        //console.log('rerendered')\r\n        let {Board,white,black,possibleMoves,attack} = this.state\r\n        \r\n        // we can not change object in our state as it will effect its value even without setState as reference of object inside object will be same e.g white.pawns = null it will change this.state.pawns as both .pawns refer to same memory\r\n        // it is also send as an argument to move fxn (to check attacks (positoin of opponents piece is required))\r\n        let newBoard = []\r\n\r\n        Board.forEach((row) => {\r\n            let newRow = []\r\n            row.forEach((pos) => {\r\n                let {r,c,color} = pos\r\n                newRow.push({r,c,color})\r\n            })\r\n            newBoard.push(newRow)\r\n        })\r\n        for(let piece in white) {\r\n            //console.log(piece,white[piece])\r\n            white[piece].forEach((pos) => {\r\n                if(!pos)\r\n                    return\r\n                let {r,c} = pos\r\n                pos.pieceName = piece\r\n                pos.player = 'white'\r\n                pos.white = true\r\n                newBoard[r][c].piece = pos\r\n            })\r\n        }\r\n        for(let piece in black) {\r\n            black[piece].forEach((pos) => {\r\n                if(!pos) \r\n                    return\r\n                let {r,c} = pos\r\n                pos.pieceName = piece\r\n                pos.player = 'black'\r\n                pos.white = false\r\n                newBoard[r][c].piece = pos\r\n            })\r\n        }\r\n\r\n        possibleMoves.forEach((pos) => {\r\n            let {r,c} = pos\r\n            newBoard[r][c].highlight = true\r\n        })\r\n\r\n        attack.forEach((pos) => {\r\n            let {r,c} = pos\r\n            newBoard[r][c].attack = true\r\n        })\r\n\r\n        let display = newBoard.map((row,index1) => {\r\n            let displayRow = row.map((block,index2) => {\r\n                let color = 'black'\r\n                if(block.color) {\r\n                    color = 'white'\r\n                }\r\n                let piece =  null\r\n                let onClick = null\r\n                if(block.piece && block.piece.player  && block.piece.pieceName) {\r\n                    piece = <img src={'/images/'+block.piece.player+\"_\"+block.piece.pieceName+'.png'} className = 'piece'></img>\r\n                    onClick = () => this.move(block.piece,newBoard)\r\n                }\r\n\r\n                if(block.highlight) {\r\n                    return <div className='block highlight' onClick={()=>{this.changePosition(index1,index2)}} key={index1*8+index2} style={{backgroundColor: color}}></div>\r\n                }\r\n                else if(block.attack) {\r\n                    return <div className='block attack' key={index1*8+index2} onClick={()=> {this.eliminate(block)}} style={{backgroundColor: color}}>{piece}</div>\r\n                }\r\n                else\r\n                    return <div className='block' key={index1*8+index2} onClick={onClick} style={{backgroundColor: color}}>{piece}</div>\r\n            })\r\n            return <div key={index1} className = 'row'>{displayRow}</div>\r\n        })\r\n    return <div style={{margin: 'auto'}}>\r\n        {display}\r\n    </div>\r\n    }\r\n}\r\nexport default Chess","import React,{Component} from 'react'\r\nimport Chess from './Chess/Chess'\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return <div>\r\n            <Chess />\r\n        </div>\r\n    }\r\n}\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}